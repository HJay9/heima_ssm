<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:security="http://www.springframework.org/schema/security"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/security
    http://www.springframework.org/schema/security/spring-security.xsd">

    <!--开启基于方法的权限控制-->
    <security:global-method-security pre-post-annotations="enabled"
                                     jsr250-annotations="enabled"
                                     secured-annotations="enabled"/>

    <!-- 配置不拦截的资源 security 表示是否授权-->
    <security:http pattern="/login.jsp" security="none"/>
    <security:http pattern="/failer.jsp" security="none"/>
    <security:http pattern="/css/**" security="none"/>
    <security:http pattern="/img/**" security="none"/>
    <security:http pattern="/plugins/**" security="none"/>
    <!--
    	配置具体的规则
    	auto-config="true"	不用自己编写登录的页面，框架提供默认登录页面
    	use-expressions="false"	是否使用SPEL表达式（没学习过）
    -->
    <security:http auto-config="true" use-expressions="true">
        <!-- 配置具体的拦截的规则 pattern：请求路径的规则" access 表示访问系统的人，必须有ROLE_USER的角色" -->
        <!--<security:intercept-url pattern="/**" access="ROLE_CEO,ROLE_HR"/>-->
        <!--符合 hasAnyRole 后括号里的任意权限都可以登录，前提是 use-expressions="true"-->
        <security:intercept-url pattern="/**" access="hasAnyRole('CEO','CTO','HR','CSP')"/>

        <!-- 定义跳转的具体的页面
            login-page 自定义登陆页面
            authentication-failure-url 用户权限校验失败之后才会跳转到这个页面，如果数据库中没有这个用户则不会跳转到这个页面。
            default-target-url 登陆成功后跳转的页面
            authentication-success-forward-url 权限验证成功后跳转的页面
            username-parameter 指定用户名称的请求参数
            password-parameter 指定密码的请求参数名称-->
        <security:form-login
                login-page="/login.jsp" login-processing-url="/login.do"
                default-target-url="/index.jsp"
                authentication-failure-url="/failer.jsp"
                authentication-success-forward-url="/pages/main.jsp"
                username-parameter="username"
                password-parameter="password"
                authentication-success-handler-ref="loginSuccessHandler"/>

        <!-- 关闭跨域请求 -->
        <security:csrf disabled="true"/>
        <!-- 退出登录 -->
        <security:logout invalidate-session="true" logout-url="/logout.do" logout-success-url="/login.jsp"/>
    </security:http>

    <!-- 切换成数据库中的用户名和密码 -->
    <security:authentication-manager>
        <security:authentication-provider user-service-ref="userService">
            <!-- 配置加密的方式-->
            <security:password-encoder ref="passwordEncoder"/>
        </security:authentication-provider>
    </security:authentication-manager>

    <!--入门案例，在内存中存储账号密码-->
    <!--<security:authentication-manager>
        <security:authentication-provider>
            <security:user-service>
                <security:user name="admin" password="{noop}123" authorities="ROLE_CEO"/>
            </security:user-service>
        </security:authentication-provider>
    </security:authentication-manager>-->

    <!-- 配置加密类 -->
    <bean id="passwordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"/>
    <bean id="loginSuccessHandler" class="com.itheima.ssm.controller.LoginSuccessHandler"/>
    <!--用于启用 SpEL 表达式的支持-->
    <!-- <bean id="webexpressionHandler" class="org.springframework.security.web.access.expression.DefaultWebSecurityExpressionHandler" />-->
</beans>












